<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.crossroads.app.mapper.ApplyMapper">
    <!--어드민 검색-->
    <sql id="searchAdmin">
        <if test="keyword != null">
            <trim prefix="where" prefixOverrides="or">
                or apply_id like concat('%', #{keyword}, '%')
                or apply_course like concat('%', #{keyword}, '%')
                or apply_location like concat('%', #{keyword}, '%')
                or apply_date like concat('%', #{keyword}, '%')
                or apply_register_date like concat('%', #{keyword}, '%')
                or starter_member_id like concat('%', #{keyword}, '%')
                or veteran_member_id like concat('%', #{keyword}, '%')
                <if test="keyword == '미정'">
                    -- or veteran_member_id like concat('%', 0, '%')
                    -- or veteran_member_id
                    or veteran_member_id is null
                </if>
                <if test="keyword == '수락대기중'">
                    or apply_status like concat('%', 0, '%')
                </if>
                <if test="keyword == '수락완료'">
                    or apply_status like concat('%', 1, '%')
                </if>
                <if test="keyword == '진행완료'">
                    or apply_status like concat('%', 1, '%')
                </if>
            </trim>
        </if>
    </sql>

    <!-- 전체 목록 조회 -->
    <select id="selectAll" resultType="applyDTO">
        select member_id, member_identification, member_password, member_name,
                member_phone, member_email, member_file_system_name, member_type, member_drive_register_date,
                member_point, apply_id, apply_course, apply_location, apply_date, apply_register_date,
                starter_member_id, veteran_member_id, apply_status
        from tbl_member m join tbl_apply a
        on m.member_id = a.starter_member_id
        order by apply_id desc
        limit #{offset}, #{amount}
    </select>

    <!-- 전체 목록 조회(필터링) 동적 쿼리 -->
    <select id="selectList" resultType="applyDTO">
        select
        member_id, member_identification, member_password, member_name,
        member_phone, member_email, member_file_system_name, member_type, member_drive_register_date,
        member_point, apply_id, apply_course, apply_location, apply_date, apply_register_date,
        starter_member_id, veteran_member_id, apply_status
        from tbl_member m join tbl_apply a on m.member_id = a.starter_member_id
        <if test="info.applyLocation != 'none'.toString()">
            and apply_location like CONCAT('%', #{info.applyLocation}, '%')
        </if>
        <if test="info.applyDate != 'none'.toString()">
            and apply_date = #{info.applyDate}
        </if>
        order by apply_id desc
        LIMIT #{criteria.offset}, #{criteria.amount}
    </select>

    <!-- 목록 개수 조회 -->
    <select id="selectCountApplys" resultType="long">
        select count(apply_id)
        from tbl_member m join tbl_apply a on m.member_id = a.starter_member_id
        <if test="info.applyLocation != 'none'.toString()">
            and apply_location like CONCAT('%', #{info.applyLocation}, '%')
        </if>
        <if test="info.applyDate != 'none'.toString()">
            and apply_date = #{info.applyDate}
        </if>
    </select>

    <!--신청 하나 조회-->
    <select id="select" resultType="applyVO" parameterType="long">
        select apply_id, apply_course, apply_location, apply_date, apply_register_date,
                starter_member_id, veteran_member_id, apply_status
        from tbl_apply
        where apply_id = #{applyId}
    </select>

    <!--나를 제외한 -->
    <select id="selectCount" resultType="long" parameterType="long">
        select count(apply_id)
        from tbl_member m join tbl_apply a
        on m.member_id = a.starter_member_id
        and veteran_member_id != #{memberId}
    </select>

    <!--    <select id="selectStatus" resultType="string" parameterType="long">-->
    <!--        select apply_status-->
    <!--        from tbl_apply-->
    <!--        where apply_id = #{applyId}-->
    <!--    </select>-->

    <!-- apply_status 변경 1이면 0으로 0이면 1로-->
    <update id="updateStatus" parameterType="long">
        update tbl_apply
        set apply_status = if(apply_status = '1' , '0', '1')
        where apply_id = #{applyId}
    </update>

    <!-- login한후 session에 담아둔 member_id 값으로 apply 수락했을 때 veteran_id 담아주기, 담겨있으면 삭제 -->
    <update id="updateVeteranId" parameterType="hashmap">
        update tbl_apply
        set veteran_member_id = if(veteran_member_id, null, #{memberId})
        where apply_id = #{applyId}
    </update>

    <delete id="delete">
        delete from tbl_apply
        where apply_id = #{applyId}
    </delete>

    <!--연수신청-->
    <!--
        <insert id="insertCourse">
        insert into tbl_apply(apply_course)
        values(#{applyCourse})
        </insert>-->

    <!--연수신청 2-->
    <insert id="insertApply">
        insert into tbl_apply(apply_location, apply_date, apply_course, starter_member_id)
        values(#{applyLocation}, #{applyDate}, #{applyCourse}, #{memberId})
    </insert>

    <!-- 검색 or 전체 목록 개수-->
    <select id="selectAppliesCount" resultType="long">
        select count(apply_id)
        from tbl_member m join tbl_apply a on m.member_id = a.starter_member_id
        <if test="info.applyLocation != 'none'.toString() and info.applyLocation != null">
            and apply_location like CONCAT('%', #{info.applyLocation}, '%')
        </if>
        <if test="info.applyDate != 'none'.toString() and info.applyDate != null">
            and apply_date = #{info.applyDate}
        </if>
    </select>

    <!-- 검색 or 전체 목록에서 나를 제외한 다른 베테랑들이 수락한 연수내역 개수-->
    <select id="selectOthersCount" resultType="long">
        select count(apply_id)
        from tbl_member m join tbl_apply a on m.member_id = a.starter_member_id
        <if test="info.applyLocation != 'none'.toString() and info.applyLocation != null">
            and apply_location like CONCAT('%', #{info.applyLocation}, '%')
        </if>
        <if test="info.applyDate != 'none'.toString() and info.applyDate != null">
            and apply_date = #{info.applyDate}
        </if>
        and veteran_member_id != #{info.memberId}
    </select>

    <!--  연수 받는 사람의 id로 연수 내역 뽑기  -->
    <select id="selectByStarterMemberId" resultType="applyVO">
        select apply_id, apply_course, apply_location, apply_date, apply_register_date, starter_member_id, veteran_member_id, apply_status
        from tbl_apply where starter_member_id = #{memberId}
        order by apply_id desc
        <if test="standards != null">
            limit #{standards.offset}, #{standards.rowCount}
        </if>
    </select>

    <!--  연수 받는 사람의 id로 연수 신청 개수 받기(status별로도 뽑기)  -->
    <select id="selectCountByStarterIdAndStatus" resultType="long">
        select count(apply_id) from tbl_apply where starter_member_id = #{memberId}
        <if test="applyStatus != null">
            group by apply_status having apply_status = #{applyStatus}
        </if>
    </select>

    <!--  베테랑의 id로 연수 내역 뽑기  -->
    <select id="selectByVeteranMemberId" resultType="applyDTO">
        select apply_id, apply_course, apply_location, apply_date, apply_register_date,
        starter_member_id, veteran_member_id, apply_status, member_name
        from tbl_apply ta join tbl_member tm
        on ta.starter_member_id = tm.member_id and veteran_member_id = #{veteranMemberId}
        and apply_status in ('1', '2')
        order by apply_id desc
        limit #{criteria.offset}, #{criteria.amount}
    </select>

    <!-- 어드민 목록 총 개수 -->
    <select id="selectCountAllAdmin" resultType="int">
        select count(apply_id)
        from tbl_apply
        <include refid="searchAdmin"/>
    </select>

    <!-- 어드민 목록 조회 -->
    <select id="selectAllAdmin" resultType="applyVO">
        select apply_id, apply_course, apply_location, apply_date, apply_register_date, starter_member_id,
        ifnull(veteran_member_id, 0) as veteran_member_id, apply_status
        from tbl_apply
        <include refid="searchAdmin"/>
        order by apply_id desc
        limit #{criteria.offset}, #{criteria.amount}
    </select>


    <!--applyId 가져오기-->
    <select id="getApplyIdByMemberId" resultType="applyDTO">
     SELECT a.apply_id
      FROM tbl_apply a
      INNER JOIN tbl_member m ON a.starter_member_id = m.member_id OR a.veteran_member_id = m.member_id
      WHERE m.member_id = #{memberId}
  </select>


</mapper>