<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.crossroads.app.mapper.ReviewMapper">
    <!--어드민 검색-->
    <sql id="searchAdmin">
        <if test="keyword != null">
            <trim prefix="and (" suffix=")" prefixOverrides="or">
                or m.member_name like concat('%', #{keyword}, '%')
                or review_title like concat('%', #{keyword}, '%')
                or review_content like concat('%', #{keyword}, '%')
            </trim>
        </if>
    </sql>

    <!-- 마이페이지 후기 목록 -->
    <select id="selectAll" resultType="reviewDTO">
        select
           m.member_id, member_file_system_name,
           a.apply_id, apply_location, apply_date, apply_register_date, starter_member_id, veteran_member_id, apply_status,
           review_id, r.member_id, review_register_date, review_update_date, review_title, review_content, review_file_system_name, review_grade, r.apply_id,
           review_file_original_name, review_file_uuid, review_file_path, review_file_size, review_file_type
        FROM tbl_member m
        join tbl_review r on m.member_id = r.member_id
        join tbl_apply a on r.apply_id = a.apply_id
        and m.member_id = #{memberId}
        order by review_id desc
        limit #{standards.offset}, #{standards.rowCount}
    </select>

    <!-- 후기 목록 전체 리스트 -->
    <select id="selectReviewAll" resultType="reviewDTO">
        select m.member_id, member_identification, member_password, member_name, member_phone, member_email, member_file_system_name, member_type, member_drive_register_date, member_point,
        a.apply_id, apply_course, apply_location, apply_date, apply_register_date, starter_member_id, veteran_member_id, apply_status,
        review_id, r.member_id, review_register_date, review_update_date, review_title, review_content, review_file_system_name, review_grade, r.apply_id
        review_file_original_name, review_file_uuid, review_file_path, review_file_size, review_file_type,
        member_file_original_name, member_file_uuid, member_file_path, member_file_size
        from tbl_member m join tbl_review r on m.member_id = r.member_id
	    join tbl_apply a on r.apply_id = a.apply_id
	    order by review_id desc
    </select>
<!-- 후기 목록 페이징처리 -->
    <select id="getListReview" resultType="reviewDTO">
        select m.member_id, member_identification, member_password, member_name, member_phone, member_email, member_file_system_name, member_type, member_drive_register_date, member_point,
        a.apply_id, apply_course, apply_location, apply_date, apply_register_date, starter_member_id, veteran_member_id, apply_status,
        review_id, r.member_id, review_register_date, review_update_date, review_title, review_content, review_file_system_name, review_grade, r.apply_id,
        member_file_original_name, member_file_uuid, member_file_path, member_file_size
        from tbl_member m join tbl_review r on m.member_id = r.member_id
	    join tbl_apply a on r.apply_id = a.apply_id
	    order by review_id desc
	    LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(review_id) FROM tbl_review
    </select>

    <delete id="delete">
        delete from tbl_review
        where review_id = #{reviewId}
    </delete>

    <!-- 후기 작성-->
    <insert id="insert" >
    INSERT INTO tbl_review (member_id, review_title, review_content, review_file_system_name, review_grade, apply_id, review_file_original_name, review_file_uuid, review_file_path, review_file_size)
    VALUES (#{memberId}, #{reviewTitle}, #{reviewContent}, #{reviewFileSystemName}, #{reviewGrade}, #{applyId}, #{reviewFileSystemName}, 0, 'C:\upload', 0)
  </insert>

    <!--업데이트-->
    <update id="update">
    UPDATE tbl_review
    SET review_title = #{reviewTitle},
        review_content = #{reviewContent},
        review_file_system_name = #{reviewFileSystemName},
        review_grade = #{reviewGrade},
        review_update_date = NOW()
    WHERE review_id = #{reviewId}
  </update>

    <select id="select" resultType="reviewVO">
        select review_id, review_title,
                review_content,
                review_file_system_name,
                review_grade, review_file_original_name, review_file_uuid, review_file_path, review_file_size, review_file_type
         from tbl_review
        where review_id = #{reviewId}
    </select>

    <!-- 마이페이지 후기 페이징 전제 개수 -->
    <select id="selectTotalMy" resultType="int">
        select count(review_id) from tbl_review
        where member_id = #{memberId}
    </select>


    <!-- 어드민 목록 총 개수 -->
    <select id="selectCountAllAdmin" resultType="int">
        select count(review_id)
        from tbl_member m join tbl_review r
        on m.member_id = r.member_id
        <include refid="searchAdmin"/>
    </select>

    <!-- 어드민 목록 조회 -->
    <select id="selectAllAdmin" resultType="reviewDTO">
        select r.review_id, r.member_id, review_register_date, review_update_date, review_title, review_content, review_file_system_name, review_grade, apply_id
            member_identification, member_password, member_name, member_phone, member_email, member_file_system_name, member_type, member_drive_register_date, member_point
        from tbl_member m join tbl_review r
        on m.member_id = r.member_id
        <include refid="searchAdmin"/>
        order by r.review_id desc
        limit #{criteria.offset}, #{criteria.amount}
    </select>

    <!--게시글 삭제-->
    <delete id="deleteAdmin">
        delete from tbl_review
        where review_id = #{reviewId}
    </delete>

    <!--회원별 게시글 삭제-->
    <delete id="deleteByMemberId">
        delete from tbl_review
        where member_id = #{memberId}
    </delete>

</mapper>